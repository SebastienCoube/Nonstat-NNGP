// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// nonstat_vecchia_Linv
Rcpp::List nonstat_vecchia_Linv(arma::mat log_range, std::string covfun_name, bool sphere, arma::mat locs, arma::mat NNarray, bool compute_derivative);
RcppExport SEXP _Bidart_nonstat_vecchia_Linv(SEXP log_rangeSEXP, SEXP covfun_nameSEXP, SEXP sphereSEXP, SEXP locsSEXP, SEXP NNarraySEXP, SEXP compute_derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type log_range(log_rangeSEXP);
    Rcpp::traits::input_parameter< std::string >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< bool >::type sphere(sphereSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type NNarray(NNarraySEXP);
    Rcpp::traits::input_parameter< bool >::type compute_derivative(compute_derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(nonstat_vecchia_Linv(log_range, covfun_name, sphere, locs, NNarray, compute_derivative));
    return rcpp_result_gen;
END_RCPP
}
// derivative_sandwich
arma::vec derivative_sandwich(arma::cube derivative, arma::vec left_vector, arma::vec right_vector, Rcpp::IntegerMatrix NNarray);
RcppExport SEXP _Bidart_derivative_sandwich(SEXP derivativeSEXP, SEXP left_vectorSEXP, SEXP right_vectorSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type derivative(derivativeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type left_vector(left_vectorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type right_vector(right_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(derivative_sandwich(derivative, left_vector, right_vector, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// log_determinant_derivative
arma::vec log_determinant_derivative(arma::cube derivative, arma::mat compressed_sparse_chol, Rcpp::IntegerMatrix NNarray);
RcppExport SEXP _Bidart_log_determinant_derivative(SEXP derivativeSEXP, SEXP compressed_sparse_cholSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type derivative(derivativeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type compressed_sparse_chol(compressed_sparse_cholSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(log_determinant_derivative(derivative, compressed_sparse_chol, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// nonstat_covmat
Rcpp::NumericMatrix nonstat_covmat(arma::mat log_range, std::string covfun_name, arma::mat locs);
RcppExport SEXP _Bidart_nonstat_covmat(SEXP log_rangeSEXP, SEXP covfun_nameSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type log_range(log_rangeSEXP);
    Rcpp::traits::input_parameter< std::string >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(nonstat_covmat(log_range, covfun_name, locs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Bidart_nonstat_vecchia_Linv", (DL_FUNC) &_Bidart_nonstat_vecchia_Linv, 6},
    {"_Bidart_derivative_sandwich", (DL_FUNC) &_Bidart_derivative_sandwich, 4},
    {"_Bidart_log_determinant_derivative", (DL_FUNC) &_Bidart_log_determinant_derivative, 3},
    {"_Bidart_nonstat_covmat", (DL_FUNC) &_Bidart_nonstat_covmat, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Bidart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
